#! /bin/bash

BASE=$(basename $0)
CONFIG_MAIN_FILE=/etc/tun2socks-manager.conf
CONFIG_GW_DIR=/etc/tun2socks-manager.d
STATE=/var/run/$BASE

# Read configuration. First set default values, then source local config
TUN2SOCKS_PROXY=127.0.0.1:1080
TUN2SOCKS_UDPGW_REMOTE=127.0.0.1:7300
TUN2SOCKS_LOGLEVEL=none
TUN_IP=10.0.10.1
TUN_IP_CIDR=24
TUN_IP_GW=10.0.10.2
TUN_IF=tun0
IPROUTE_TABLE=tun
IPROUTE_TABLE_ID=100
IPROUTE_TABLE_PRIO=1000

. $CONFIG_MAIN_FILE

# Functions to manipulate ip addresses
ip_to_int()
{
    local IP=$1
    echo $(( $(echo $IP | sed -r 's/^/(((/; s/\./)*256+/g') ))
}

cidr_to_int()
{
    local CIDR=$1
    echo $(( (0xFFFFFFFF << (32-CIDR)) & 0xFFFFFFFF ))
}

int_to_ip()
{
    local INT=$1
    local IP3=$(( (INT >> 24) & 0xFF ))
    local IP2=$(( (INT >> 16) & 0xFF ))
    local IP1=$(( (INT >> 8) & 0xFF ))
    local IP0=$(( INT & 0xFF ))
    echo "$IP3.$IP2.$IP1.$IP0"
}

cidr_to_mask()
{
    local CIDR=$1
    int_to_ip $(cidr_to_int $CIDR)
}

ip_cidr_to_subnet()
{
    local IP_INT=$(ip_to_int $1)
    local CIDR_INT=$(cidr_to_int $2)
    int_to_ip $((IP_INT & CIDR_INT))
}

# 1: warning or non-permanent error
# 3: permanent error (typically configuration error)
die()
{
    CODE=$1
    shift
    syslog_err "Error! $@"
    exit $CODE
}

syslog_err()
{
    >&2 echo "$BASE: $@"
    syslog "$@"
}

syslog()
{
    logger --id=$BASHPID -t $BASE -- "$@"
}

cmdlog()
{
    # local txtrst=$'\e[0m'    # Text Reset
    # local txtwht=$'\e[0;37m' # White

    # DEBUG - Uncomment lines below
    # >&2 echo "${txtwht}+ $@${txtrst}"
    # syslog "cmd: $@"
    "$@"
}

do_install()
{
    # Skip if installed already
    egrep -q "^$IPROUTE_TABLE_ID $IPROUTE_TABLE\$" /etc/iproute2/rt_tables && return 0
    # Error if ID already taken
    egrep -q "^$IPROUTE_TABLE_ID " /etc/iproute2/rt_tables && die 3 "Table id $IPROUTE_TABLE_ID already defined."

    # All ok - Create new routing table
    syslog "Creating routing table '$IPROUTE_TABLE' (id=$IPROUTE_TABLE_ID)."
    echo "$IPROUTE_TABLE_ID $IPROUTE_TABLE" >> /etc/iproute2/rt_tables
}

do_uninstall()
{
    # Delete routing table. Only delete our entry
    if egrep -q "^$IPROUTE_TABLE_ID $IPROUTE_TABLE\$" /etc/iproute2/rt_tables ; then
        syslog "Deleting routing table '$IPROUTE_TABLE' (id=$IPROUTE_TABLE_ID)."
        cmdlog sed -i "/^$IPROUTE_TABLE_ID $IPROUTE_TABLE\$/d" /etc/iproute2/rt_tables
    fi
}

do_start()
{
    # Create new tun/tap device if necessary
    if ! ip link show $TUN_IF &> /dev/null; then
        syslog "Creating new tun/tap device $TUN_IF (name=$TUN_IF, ip4=$TUN_IP/$TUN_IP_CIDR)."
        cmdlog ip tuntap add dev $TUN_IF mode tun ${TUN_USER:+user $TUN_USER}
        cmdlog ip address add $TUN_IP/$TUN_IP_CIDR dev $TUN_IF
    fi

    # Start connection if not active yet
    if ! ip link show $TUN_IF | grep -q "[<,]UP[,>]" &> /dev/null; then
        syslog "Activating tun/tap device $TUN_IF."
        cmdlog ip link set dev $TUN_IF up
    fi

    # Start badvpn-tun2socks daemon if not running yet
    if ! pgrep badvpn-tun2sock &> /dev/null; then    # pgrep is limited to the 15 characters in /proc/pid/stat
        syslog "Starting badvpn-tun2socks daemon."
        local TUN_IP_GW_MASK=$(cidr_to_mask $TUN_IP_CIDR)
        cmdlog su $TUN_USER -c "setsid -f badvpn-tun2socks --logger syslog --loglevel $TUN2SOCKS_LOGLEVEL \
            --tundev $TUN_IF --netif-ipaddr $TUN_IP_GW --netif-netmask $TUN_IP_GW_MASK \
            --socks-server-addr $TUN2SOCKS_PROXY ${TUN2SOCKS_UDPGW_REMOTE:+--udpgw-remote-server-addr $TUN2SOCKS_UDPGW_REMOTE}"
    fi
}

do_stop()
{
    # Killing badvpn-tun2socks if it is running
    if pgrep badvpn-tun2sock &> /dev/null; then  # pgrep is limited to the 15 characters in /proc/pid/stat
        syslog "Killing badvpn-tun2socks daemon."
        cmdlog pkill -9 badvpn-tun2sock
    fi

    # Delete tun/tap device $TUN_IF
    if ip link show $TUN_IF &> /dev/null; then
        syslog "Deleting interface $TUN_IF."
        ip tuntap delete dev $TUN_IF mode tun
    fi
}

get_current_gw_and_itf()
{
    # Assuming pattern like:
    #
    #     default via 10.137.3.254 dev enx3c18a0cff295 proto dhcp metric 100
    #
    read GW IF < <( ip route | awk -v TUN_IF=$TUN_IF 'BEGIN { metric=10000; IF="none"; GW="0.0.0.0" } { if($1 == "default" && $9 < metric && $5 != TUN_IF) { IF=$5; GW=$3; metric=$9 } } END { print GW " " IF }' )
}

update_dnsmasq()
{
    local CONFIG=$1
    syslog "Configuring upstream DNS servers in dnsmasq."
    syslog "- using '$CONFIG'."
    cmdlog dbus-send --system --print-reply --dest=org.freedesktop.NetworkManager.dnsmasq \
        /uk/org/thekelleys/dnsmasq uk.org.thekelleys.SetDomainServers \
        "array:string:$CONFIG"
}

do_up()
{
    # Get current gateway and interface
    get_current_gw_and_itf
    syslog "Current gateway is $GW via interface $IF."
    if [ "$IF" == "none" ]; then
        > $STATE
        syslog "No default interface or gateway found."
        exit 0
    fi

    # Exit if we don't have a config file for the current gateway
    TUN_CFG_FILE=$CONFIG_GW_DIR/$GW
    if ! [ -e $TUN_CFG_FILE ]; then
        > $STATE
        syslog "No config for current gateway. Create file '$TUN_CFG_FILE' to setup a tunnel."
        exit 0
    fi

    # Add subnet route for tun0 (duplicate from main route)
    # ... When tun0 is up, kernel create a route in table main for subnet 10.0.10.0/24.
    # ... However our config may create another route in table tun that includes that subnet (e.g. 10.0.0.0/8).
    # ... If we don't duplicate kernet route in this table, this less specific route will take precedence, and
    # ... hence subnet 10.0.10.0/24 will become unreachable.
    syslog "Duplicating $TUN_IF link route from main table."
    local TUN_IP_SUBNET=$(ip_cidr_to_subnet $TUN_IP $TUN_IP_CIDR)
    TUN_ROUTE_MAIN=$(ip route | sed -rn "/^$TUN_IP_SUBNET\/$TUN_IP_CIDR/{s/linkdown +//; p}")
    [ -n "$TUN_ROUTE_MAIN" ] || die 1 "Cannot find $TUN_IF link route."
    cmdlog ip route add $TUN_ROUTE_MAIN table $IPROUTE_TABLE

    # We duplicate "proto kernel scope link" routes from the main table, to make sure these remain accessible
    syslog "Duplicating scope link routes from main table."
    while read subnet _dev dev _proto proto _scope scope _src src _metric metric ignore; do
        if [ "$_dev" == "dev" -a "$_proto" == "proto" -a "$_scope" == "scope" -a "$_src" == "src"  ]; then
            if [ "$dev" != "$TUN_IF" -a "$proto" == "kernel" -a "$scope" == "link" ]; then
                if [ "$_metric" == "metric" ]; then
                    syslog "Duplicating $subnet dev $dev proto $proto scope $scope src $src metric $metric"
                    cmdlog ip route add $subnet dev $dev proto $proto scope $scope src $src metric $metric table $IPROUTE_TABLE
                else
                    syslog "Duplicating $subnet dev $dev proto $proto scope $scope src $src"
                    cmdlog ip route add $subnet dev $dev proto $proto scope $scope src $src table $IPROUTE_TABLE
                fi
            fi
        fi
    done < <(ip route)


    # Parsing configuration
    DNSMASQ_DNS_CONFIG=
    syslog "Applying configuration from file '$TUN_CFG_FILE'."
    while read CFG_TYPE A B C; do
        [ -n "$CFG_TYPE" ] || continue
        case $CFG_TYPE in
            local )
                [[ $A =~ ^[0-9.]+(/[0-9]+)?$ ]] || die 3 "Bad route '$A' in file '$TUN_CFG_FILE'."
                syslog "- local route to net $A through interface $IF."
                cmdlog ip route add $A via $GW table $IPROUTE_TABLE
                ;;
            dns )
                [[ $A =~ ^[0-9.]+$ ]] || die 3 "Bad DNS IP '$A' in file '$TUN_CFG_FILE'."
                if [ -n "$B" ]; then
                    [[ $B =~ ^/[a-zA-Z_.-]*/$ ]] || die 3 "Bad DNS DOMAIN '$B' in file '$TUN_CFG_FILE'."
                    DNSMASQ_DNS_CONFIG="${DNSMASQ_DNS_CONFIG:+$DNSMASQ_DNS_CONFIG,}$B$A"
                else
                    DNSMASQ_DNS_CONFIG="${DNSMASQ_DNS_CONFIG:+$DNSMASQ_DNS_CONFIG,}$A"
                fi
                ;;
            *)
                die 3 "Unknown config '$CFG_TYPE'."
        esac
    done < <(sed -r 's/#.*//' "$TUN_CFG_FILE")

    syslog "Setting $TUN_IP_GW as default gateway."
    # Metric not needed. Will take precedence thanks to our new table and policy rule
    cmdlog ip route add default via $TUN_IP_GW table $IPROUTE_TABLE

    # Enable new routes and flush route cache
    syslog "Enabling route table '$IPROUTE_TABLE' and flushing cache."
    cmdlog ip rule add from all lookup $IPROUTE_TABLE prio $IPROUTE_TABLE_PRIO
    cmdlog ip route flush table cache

    echo "IF=$IF" > $STATE

    # Configure dnsmasq if necessary
    if [ -n "$DNSMASQ_DNS_CONFIG" ]; then
        update_dnsmasq "$DNSMASQ_DNS_CONFIG"
        echo "DNSMASQ_DNS_CONFIG=$DNSMASQ_DNS_CONFIG" >> $STATE
    fi
}

do_down()
{
    > $STATE

    if ip rule | grep "^$IPROUTE_TABLE_PRIO" -q; then
        syslog "Removing rule for table $IPROUTE_TABLE."
        cmdlog ip rule del prio $IPROUTE_TABLE_PRIO
    fi

    # Remove all routes in tunnel table
    syslog "Flushing route table $IPROUTE_TABLE."
    cmdlog ip route flush table $IPROUTE_TABLE

    # Reset dnsmasq
    syslog "Reloading dnsmasq configuration."
    cmdlog pkill -SIGHUP NetworkManager      # Reload dnsmasq configuration
}

usage()
{
    echo "$BASE { install | uninstall | start | stop | up | down | update [IF] [STATUS] }"
}

check_root()
{
    [ $(whoami) == "root" ] || die 3 "Run this script as root."
}

check_root

shift $((OPTIND-1))
[ $# -ge 1 ] || usage
COMMAND=$1
shift

# Only for update command
CMD_IF=$1
CMD_STATUS=$2

syslog "Received command: $COMMAND${CMD_IF:+ $CMD_IF}${CMD_STATUS:+ $CMD_STATUS}."

if [ "$COMMAND" = install ]; then
    do_install
elif [ "$COMMAND" = uninstall ]; then
    do_down
    do_stop
    do_uninstall
elif [ "$COMMAND" = start ]; then
    do_start
elif [ "$COMMAND" = stop ]; then
    do_down
    do_stop
elif [ "$COMMAND" = up ]; then
    do_start && do_up
elif [ "$COMMAND" = down ]; then
    do_down
elif [ "$COMMAND" = update ]; then
    if [ -n "$CMD_IF" -a "$CMD_STATUS" == down ]; then
        # An interface went down. Exit if we don't route through it
        if ! grep -q "^IF=$CMD_IF\$" $STATE; then
            DNSMASQ_DNS_CONFIG=$(<$STATE perl -lne 'print for /DNSMASQ_DNS_CONFIG=(.*)/g')
            if [ -n "$DNSMASQ_DNS_CONFIG" ]; then
                # NM may reconfigure dnsmasq in case an itf went down. 
                # So let's make sure we keep our DNS settings.
                update_dnsmasq "$DNSMASQ_DNS_CONFIG"
            else
                syslog "No change needed in current tunnel."
            fi
            exit 0
        fi
    fi
    # We cannot do this if we want to restore hotspot route (that may went up and down separately)
    # if [ -n "$CMD_IF" -a "$CMD_STATUS" == up ]; then
    #     # An interface went up. Exit if we route already through the (new) current gw
    #     get_current_gw_and_itf
    #     if grep -q "^IF=$IF\$" $STATE; then
    #         syslog "No change needed in current tunnel (CMD_IF $CMD_IF)."
    #         exit 0
    #     fi
    # fi
    do_down && do_start && do_up
else
    die 3 "Unknown command '$COMMAND'."
fi

